# -*- coding: utf-8 -*-
"""PC01_SI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15vbUvj_lnaQd0KYXmM0W35Ve0BKTBsLu
"""

import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(page_title="Sistema de Cr√©ditos - Caja San Jer√≥nimo", layout="wide")
st.title("Sistema de Gesti√≥n de Cr√©ditos ‚Äì Caja San Jer√≥nimo")

# Base de datos en memoria
if 'solicitudes' not in st.session_state:
    st.session_state.solicitudes = []
if 'pagos' not in st.session_state:
    st.session_state.pagos = []

menu = st.sidebar.radio("Men√∫", [
    "üè† Inicio",
    "üìù Ingreso de Solicitud",
    "üîç Evaluaci√≥n Crediticia",
    "‚úÖ Aprobaci√≥n de Cr√©ditos",
    "üí≥ Gesti√≥n de Pagos",
    "üìä Panel de Cr√©ditos",
    "‚öôÔ∏è Configuraci√≥n del Sistema"
])

if menu == "üè† Inicio":
    st.subheader("Bienvenido al sistema")
    st.markdown("Este sistema simula la gesti√≥n de cr√©ditos de Caja San Jer√≥nimo.")
    st.markdown("_Desarrollado por: Dr. Michael Quinteros_")


elif menu == "üìù Ingreso de Solicitud":
    st.subheader("Registrar nueva solicitud")
    with st.form("form_solicitud"):
        nombre = st.text_input("Nombre")
        dni = st.text_input("DNI")
        monto = st.number_input("Monto solicitado", 1000, 100000)
        plazo = st.selectbox("Plazo (meses)", [6, 12, 24, 36])
        ingresos = st.number_input("Ingresos mensuales", 500, 20000)
        historial = st.slider("Historial crediticio (0-10)", 0, 10, 5)
        enviar = st.form_submit_button("Registrar")
        if enviar:
            st.session_state.solicitudes.append({
                'ID': len(st.session_state.solicitudes) + 1,
                'Nombre': nombre,
                'DNI': dni,
                'Monto': monto,
                'Plazo': plazo,
                'Ingresos': ingresos,
                'Historial': historial,
                'Puntaje FICO': None,
                'Estado': 'Pendiente'
            })
            st.success("Solicitud registrada")


elif menu == "üîç Evaluaci√≥n Crediticia":
    st.subheader("Evaluaci√≥n de solicitudes")
    for solicitud in st.session_state.solicitudes:
        if solicitud['Puntaje FICO'] is None:
            fico = min(850, int(300 + solicitud['Historial'] * 50 + (solicitud['Ingresos'] / 500)))
            solicitud['Puntaje FICO'] = fico
            solicitud['Estado'] = 'Aprobado' if fico > 650 else 'Rechazado'
    st.success("Evaluaci√≥n realizada")

    st.dataframe(pd.DataFrame(st.session_state.solicitudes))


elif menu == "‚úÖ Aprobaci√≥n de Cr√©ditos":
    st.subheader("Solicitudes registradas")
    st.dataframe(pd.DataFrame(st.session_state.solicitudes))


elif menu == "üí≥ Gesti√≥n de Pagos":
    st.subheader("Gesti√≥n de pagos")
    aprobados = [s for s in st.session_state.solicitudes if s['Estado'] == 'Aprobado']
    if aprobados:
        opciones = {f"{s['ID']} - {s['Nombre']}": s for s in aprobados}
        seleccion = st.selectbox("Selecciona cr√©dito", opciones.keys())
        pago_estado = st.selectbox("Estado de pago", ["Pagado", "Activo", "Vencido"])
        if st.button("Registrar Pago"):
            st.session_state.pagos.append({
                'ID': opciones[seleccion]['ID'],
                'Nombre': opciones[seleccion]['Nombre'],
                'Estado de Pago': pago_estado
            })
            st.success("Pago registrado")
        pagos_df = pd.DataFrame([p for p in st.session_state.pagos if p['ID'] == opciones[seleccion]['ID']])
        st.subheader("Historial de Pagos")
        st.dataframe(pagos_df)
    else:
        st.info("No hay cr√©ditos aprobados")


elif menu == "üìä Panel de Cr√©ditos":
    st.subheader("Panel de resumen")
    total = len(st.session_state.solicitudes)
    aprobados = sum(s['Estado'] == 'Aprobado' for s in st.session_state.solicitudes)
    rechazados = sum(s['Estado'] == 'Rechazado' for s in st.session_state.solicitudes)
    st.metric("Total de solicitudes", total)
    st.metric("Aprobadas", aprobados)
    st.metric("Rechazadas", rechazados)
    st.dataframe(pd.DataFrame(st.session_state.solicitudes))



elif menu == "‚öôÔ∏è Configuraci√≥n del Sistema":
    st.subheader("Configuraci√≥n del Sistema")
    st.markdown("""
    ### Requisitos Funcionales:
    - Ingreso de solicitudes con validaci√≥n
    - Evaluaci√≥n crediticia autom√°tica (modelo FICO)
    - Decisi√≥n de aprobaci√≥n/rechazo
    - Gesti√≥n y registro de pagos

    ### Requisitos No Funcionales:
    - Tiempo de respuesta < 5 minutos bajo 200 usuarios simult√°neos
    - Interfaz usable e intuitiva
    - Seguridad con cifrado AES-256 y TLS 1.2
    - Portabilidad y mantenibilidad estructurada
    """)