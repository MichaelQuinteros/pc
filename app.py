# -*- coding: utf-8 -*-
"""PC01_SI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15vbUvj_lnaQd0KYXmM0W35Ve0BKTBsLu
"""

import streamlit as st
import pandas as pd
import numpy as np
import time

st.set_page_config(page_title="Sistema de Gesti√≥n de Cr√©ditos", layout="wide")
st.title("Sistema de Gesti√≥n de Cr√©ditos ‚Äì Caja San Jer√≥nimo")

# Inicializaci√≥n de base de datos en memoria
if 'solicitudes' not in st.session_state:
    st.session_state.solicitudes = []
if 'pagos' not in st.session_state:
    st.session_state.pagos = []

# MEN√ö DE NAVEGACI√ìN
menu = st.sidebar.radio("Men√∫", [
    "üè† Inicio",
    "üìù Ingreso de Solicitud",
    "üîç Evaluaci√≥n Crediticia",
    "‚úÖ Aprobaci√≥n de Cr√©ditos",
    "üí≥ Gesti√≥n de Pagos",
    "üìä Panel de Cr√©ditos",
    "‚öôÔ∏è Configuraci√≥n del Sistema",
])

# INICIO
if menu == "üè† Inicio":
    st.header("Bienvenido al Sistema de Gesti√≥n de Cr√©ditos")
    st.markdown("""
    Este sistema permite simular la gesti√≥n completa de solicitudes de cr√©dito, desde su ingreso hasta la evaluaci√≥n, aprobaci√≥n y pagos.
    """)
    st.success("Selecciona una opci√≥n del men√∫ para comenzar")

# INGRESO DE SOLICITUD
elif menu == "üìù Ingreso de Solicitud":
    st.header("Ingreso de Solicitud de Cr√©dito")
    with st.form("form_solicitud"):
        nombre = st.text_input("Nombre del solicitante")
        dni = st.text_input("DNI")
        monto = st.number_input("Monto solicitado (S/)", 1000, 100000)
        plazo = st.selectbox("Plazo en meses", [6, 12, 24, 36])
        ingresos = st.number_input("Ingresos mensuales (S/)", 500, 20000)
        historial = st.slider("Historial crediticio (0=malo, 10=excelente)", 0, 10, 5)
        enviado = st.form_submit_button("Registrar Solicitud")

        if enviado:
            solicitud = {
                "ID": len(st.session_state.solicitudes) + 1,
                "Nombre": nombre,
                "DNI": dni,
                "Monto": monto,
                "Plazo": plazo,
                "Ingresos": ingresos,
                "Historial": historial,
                "Puntaje FICO": None,
                "Estado": "Pendiente"
            }
            st.session_state.solicitudes.append(solicitud)
            st.success("Solicitud registrada correctamente")

# EVALUACI√ìN CREDITICIA
elif menu == "üîç Evaluaci√≥n Crediticia":
    st.header("Evaluaci√≥n Crediticia")
    if not st.session_state.solicitudes:
        st.warning("No hay solicitudes registradas")
    else:
        for solicitud in st.session_state.solicitudes:
            if solicitud["Puntaje FICO"] is None:
                puntaje = min(850, int(300 + solicitud['Historial'] * 50 + (solicitud['Ingresos'] / 500)))
                solicitud["Puntaje FICO"] = puntaje
                solicitud["Estado"] = "Aprobado" if puntaje > 650 else "Rechazado"
        st.success("Evaluaci√≥n realizada para todas las solicitudes pendientes")
        st.dataframe(pd.DataFrame(st.session_state.solicitudes))

# APROBACI√ìN DE CR√âDITOS
elif menu == "‚úÖ Aprobaci√≥n de Cr√©ditos":
    st.header("Estado de Solicitudes")
    df_aprob = pd.DataFrame(st.session_state.solicitudes)
    st.dataframe(df_aprob)

# GESTI√ìN DE PAGOS
elif menu == "üí≥ Gesti√≥n de Pagos":
    st.header("Gesti√≥n de Pagos de Cr√©ditos")
    aprobados = [s for s in st.session_state.solicitudes if s['Estado'] == 'Aprobado']
    if not aprobados:
        st.info("No hay cr√©ditos aprobados")
    else:
        opciones = {f"{s['ID']} - {s['Nombre']}": s for s in aprobados}
        seleccionado = st.selectbox("Selecciona un cr√©dito", opciones.keys())
        credito = opciones[seleccionado]
        pago = st.selectbox("Estado del pago", ["Pagado", "Activo", "Vencido"])
        registrar = st.button("Registrar Pago")
        if registrar:
            st.session_state.pagos.append({"ID": credito['ID'], "Nombre": credito['Nombre'], "Estado de Pago": pago})
            st.success("Estado de pago actualizado")
        st.subheader("Historial de Pagos")
        pagos_df = pd.DataFrame([p for p in st.session_state.pagos if p['ID'] == credito['ID']])
        if not pagos_df.empty:
            st.dataframe(pagos_df)
        else:
            st.info("Sin pagos registrados para este cr√©dito")

# PANEL DE CR√âDITOS
elif menu == "üìä Panel de Cr√©ditos":
    st.header("Panel de Control de Cr√©ditos")
    if st.session_state.solicitudes:
        df = pd.DataFrame(st.session_state.solicitudes)
        st.metric("Total de Solicitudes", len(df))
        st.metric("Aprobados", (df['Estado'] == 'Aprobado').sum())
        st.metric("Rechazados", (df['Estado'] == 'Rechazado').sum())
        st.dataframe(df)
    else:
        st.info("No hay datos para mostrar")

# CONFIGURACI√ìN
elif menu == "‚öôÔ∏è Configuraci√≥n del Sistema":
    st.header("Configuraci√≥n y Datos T√©cnicos")
    st.markdown("""
    ### Requisitos Funcionales:
    - Ingreso de solicitudes con validaci√≥n
    - Evaluaci√≥n crediticia autom√°tica (modelo FICO)
    - Decisi√≥n de aprobaci√≥n/rechazo
    - Gesti√≥n y registro de pagos

    ### Requisitos No Funcionales:
    - Tiempo de respuesta < 5 minutos bajo 200 usuarios simult√°neos
    - Integraci√≥n con CRM y contabilidad (simulado)
    - Interfaz usable e intuitiva
    - Seguridad con cifrado AES-256 y TLS 1.2
    - Portabilidad y mantenibilidad estructurada
    """)